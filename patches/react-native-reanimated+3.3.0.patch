diff --git a/node_modules/react-native-reanimated/src/reanimated2/animation/decay.ts b/node_modules/react-native-reanimated/src/reanimated2/animation/decay.ts
index 9880096..a260f01 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/animation/decay.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/animation/decay.ts
@@ -1,12 +1,12 @@
 import { defineAnimation } from './util';
-import {
+import type {
   Animation,
   AnimationCallback,
   AnimationObject,
   AnimatableValue,
   Timestamp,
 } from '../commonTypes';
-import { Platform } from 'react-native';
+import { isWeb } from '../PlatformChecker';
 
 interface DecayConfig {
   deceleration?: number;
@@ -38,7 +38,15 @@ export interface InnerDecayAnimation
   current: number;
 }
 
-export function withDecay(
+const IS_WEB = isWeb();
+
+// TODO TYPESCRIPT This is a temporary type to get rid of .d.ts file.
+type withDecayType = (
+  userConfig: DecayConfig,
+  callback?: AnimationCallback
+) => number;
+
+export const withDecay = function (
   userConfig: DecayConfig,
   callback?: AnimationCallback
 ): Animation<DecayAnimation> {
@@ -59,35 +67,28 @@ export function withDecay(
       );
     }
 
-    const VELOCITY_EPS = Platform.OS !== 'web' ? 1 : 1 / 20;
+    const VELOCITY_EPS = IS_WEB ? 1 / 20 : 1;
+    const DERIVATIVE_EPS = 0.1;
     const SLOPE_FACTOR = 0.1;
 
     let decay: (animation: InnerDecayAnimation, now: number) => boolean;
 
     if (config.rubberBandEffect) {
       decay = (animation: InnerDecayAnimation, now: number): boolean => {
-        const {
-          lastTimestamp,
-          startTimestamp,
-          current,
-          initialVelocity,
-          velocity,
-        } = animation;
+        const { lastTimestamp, startTimestamp, current, velocity } = animation;
 
         const deltaTime = Math.min(now - lastTimestamp, 64);
-        const clampIndex = initialVelocity > 0 ? 1 : 0;
+        const clampIndex =
+          Math.abs(current - config.clamp![0]) <
+          Math.abs(current - config.clamp![1])
+            ? 0
+            : 1;
+
         let derivative = 0;
         if (current < config.clamp![0] || current > config.clamp![1]) {
           derivative = current - config.clamp![clampIndex];
         }
 
-        if (derivative !== 0) {
-          animation.springActive = true;
-        } else if (derivative === 0 && animation.springActive) {
-          animation.current = config.clamp![clampIndex];
-          return true;
-        }
-
         const v =
           velocity *
             Math.exp(
@@ -95,6 +96,15 @@ export function withDecay(
             ) -
           derivative * config.rubberBandFactor;
 
+        if (Math.abs(derivative) > DERIVATIVE_EPS) {
+          animation.springActive = true;
+        } else if (animation.springActive) {
+          animation.current = config.clamp![clampIndex];
+          return true;
+        } else if (Math.abs(v) < VELOCITY_EPS) {
+          return true;
+        }
+
         animation.current =
           current + (v * config.velocityFactor * deltaTime) / 1000;
         animation.velocity = v;
@@ -187,4 +197,4 @@ export function withDecay(
       startTimestamp: 0,
     } as DecayAnimation;
   });
-}
+} as unknown as withDecayType;
